#! /bin/bash
# sweet-dns #
# Shell script to compress pdf using ghostscript lib.
##### Definitions
prefix=$(brew --prefix)
sweetdnsdir=$prefix/etc/sweet-dns
sweetdnsconf=$prefix/etc/sweet-dns/dnsmasq.conf
sweetdnstmp=$sweetdnsconf.tmp
sweetdnsdomains=$sweetdnsdir/domains.conf
sweetdnsdomainstmp=$sweetdnsdir/domains.conf.tmp
sweetdnsresolv=$sweetdnsdir/resolv.conf
resolvconf=/etc/resolv.conf
dnsmasqdir=$prefix/etc/dnsmasq/dnsmasq.d
configdefault=$(brew --cellar)/dnsmasq/$(brew ls --versions dnsmasq | awk '{print $2}')/.bottle/etc/dnsmasq.conf
dnsmasqconfig=$prefix/etc/dnsmasq.conf
dnsmasqbackup=$dnsmasqconfig.bak
fileregistries=$dnsmasqdir/sweet-dns-registries.conf
tmpregfile=/private/tmp/sweet-dns-registries.tmp
configurations=('"port=53"' '"resolv-file=/var/run/resolv.conf"' '"listen-address=127.0.0.1"' '"conf-dir=/usr/local/etc/dnsmasq/dnsmasq.d/,*.conf"')
##### Functions
conf () {
    #config sweet-dns
    if [[ ! -f $sweetdnsconf ]]; then
        if [[ ! -d $sweetdnsdir ]]; then bash -c "mkdir -p $sweetdnsdir"; fi
        if [[ ! -f $configdefault ]]; then
            HOMEBREW_NO_AUTO_UPDATE=1 brew reinstall dnsmasq > /dev/null
            if [[ ! $? -eq 0 ]]; then
                echo -e "\033[1m\e[31mError >>>\e[0m\033[0m sweet-dns configuration: dnsmasq config not found!, please reinstall dnsmasq and/or use brew doctor for problems!\n"
                exit 1
            fi
        else
            if [[ -f $dnsmasqconfig ]]; then
                if [[ $dnsmasqbackup ]]; then bash -c "rm -rf $dnsmasqbackup";fi
                bash -c "cp -rf $dnsmasqconfig $dnsmasqbackup"
                if [[ $? -eq 0 ]]; then echo -e "\033[1mInfo >>>\033[0m Successfull backup of previous dnsmasq configuration file! was saved to: $dnsmasqbackup\n"; fi
            fi
            bash -c "cp -rf $configdefault $sweetdnsconf"
            for config in "${configurations[@]}"; do
                pattern=$(echo "$config" | tr -d '"')
                output=$(bash -c "awk '1;/#${pattern%%=*}=/ && !found { for (i = 2; i <= NF; i++); print $config; found=1; next }' $sweetdnsconf > $sweetdnstmp && mv $sweetdnstmp $sweetdnsconf" 2>&1)
            done
            if [[ ! $? -eq 0 ]]; then
                echo -e "\033[1m\e[31mError >>>\e[0m\033[0m sweet-dns configuration: "$output "\n"
                exit 1
            else
                #config dnsmasq
                bash -c "cp -rf $sweetdnsconf $dnsmasqconfig"
                if [[ ! -d $dnsmasqdir ]]; then bash -c "mkdir -p $dnsmasqdir"; fi
                if [[ ! -f  $fileregistries ]]; then bash -c "touch $fileregistries"; fi
            fi
        fi
        #resolv conf
        bash -c "cat <<EOIPFW > $sweetdnsdir/resolv.conf
nameserver 127.0.0.1
port 53
EOF
EOIPFW"
        sudo bash -c "rm -rf $resolvconf"
        sudo bash -c "cp -rf $sweetdnsresolv $resolvconf"
    else
        if ! cmp $dnsmasqconfig $sweetdnsconf > /dev/null; then
            read < /dev/tty -p $'\033[1m\e[31mWarn >>>\e[0m\033[0m'" Installation and previous configurations of dnsmasq found! do you want continue? [Y/n] " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                cp -rf $dnsmasqconfig $dnsmasqbackup
                HOMEBREW_NO_AUTO_UPDATE=1 brew reinstall dnsmasq
                cp -rf $sweetdnsconf $dnsmasqconfig
            fi
        fi
        if ! cmp $sweetdnsresolv $resolvconf > /dev/null; then
            sudo bash -c "cp -rf $sweetdnsresolv $resolvconf"
        fi
    fi
    #create domains file
    if [[ ! -f  $sweetdnsdomains ]]; then bash -c "touch $sweetdnsdomains"; fi
    #restart and exit
    rest
    exit 0
}
fix () {
    if [[ -s $sweetdnsdomains ]]; then
        sudo bash -c "rm -rf /etc/resolver/*"
        bash -c "rm -rf $fileregistries"
        bash -c "touch $fileregistries"
        while IFS= read -r domain; do add; done <"$sweetdnsdomains"
        #restart and exit
        rest
        exit 0
    else
        echo -e "\033[1m\e[31mWarn >>>\e[0m\033[0m empty $sweetdnsdomains file, nothing to fix!"
        exit 1
    fi
}
use () {
    #sweet-dns help
    echo -e "\033[1mHelp\033[0m \n
        \033[1msweet-dns\033[0m [[-A | -D ] [ -d [domain1] -d [domainN] ]] | [ -h ] \n"
}
rest () {
    #restart dnsmasq service
    if [[ -f /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist ]]; then
        sudo launchctl stop homebrew.mxcl.dnsmasq
        sudo launchctl start homebrew.mxcl.dnsmasq
    else
        sudo brew services restart dnsmasq
    fi
}
add () {
    #add resolver
    if [[ ! -f /etc/resolver/"$domain" ]]; then
        if [[ ! -d /etc/resolver ]]; then
            sudo bash -c "mkdir -v /etc/resolver"
        fi
        sudo bash -c "touch /etc/resolver/$domain"
        sudo bash -c "echo nameserver 127.0.0.1 >> /etc/resolver/$domain"
        resolver=true
    else
        if ! grep -q "nameserver 127.0.0.1" /etc/resolver/"$domain"; then
            sudo bash -c "rm /etc/resolver/$domain"
            sudo bash -c "echo nameserver 127.0.0.1 >> /etc/resolver/$domain"
        fi
    fi
    #add registries
    if grep -q "address=/.$domain/127.0.0.1" $fileregistries; then
        existingdomain+=($domain)
    else
        sudo bash -c "echo address=/.$domain/127.0.0.1 >> $fileregistries"
        newdomain+=($domain)
    fi
    if ! grep -q "$domain" $sweetdnsdomains; then
       bash -c "echo $domain >> $sweetdnsdomains"
    fi
}
del () {
    #delete resolver
    if [[ -f /etc/resolver/"$domain" ]]; then
        sudo bash -c "rm /etc/resolver/$domain"
    fi
    #delete regitries
    pattern="address=/.$domain/127.0.0.1"
    if grep -q $pattern $fileregistries; then
        while read -r line
        do
          [[ ! $line =~ $pattern ]] && echo "$line"
        done < $fileregistries > $tmpregfile
        mv $tmpregfile $fileregistries
        rm $tmpregfile
    fi
    deletedomain+=($domain)
    #delete from domain file
    pattern="$domain"
    if grep -q $pattern $sweetdnsdomains; then
        while read -r line
        do
          [[ ! $line =~ $pattern ]] && echo "$line"
        done < $sweetdnsdomains > $sweetdnsdomainstmp
        mv $sweetdnsdomainstmp $sweetdnsdomains
    fi
}
##### Main
for arg in "$@"; do
  shift
  case "$arg" in
    "--help")       set -- "$@" "-h" ;;
    "--domain")     set -- "$@" "-d" ;;
    "--?")          set -- "$@" "-?" ;;
    "--add")        set -- "$@" "-A" ;;
    "--del")        set -- "$@" "-D" ;;
    "--delete")     set -- "$@" "-D" ;;
    "--remove")     set -- "$@" "-D" ;;
    "--config")     set -- "$@" "-c" ;;
    "--fix")        set -- "$@" "-f" ;;
    *)              set -- "$@" "$arg"
  esac
done
OPTIND=1
while getopts ":h:d:AD?cf" opt; do
  case "$opt" in
    "h")    use
            exit 0
            ;;
    "d")    domains+=("$OPTARG")
            ;;
    "?")    use
            exit 1
            ;;
    "A")    add=true
            ;;
    "D")    del=true
            ;;
    "c")    conf
            ;;
    "f")    fix
            ;;
    *)      use
            exit 1
  esac
done
shift $(expr $OPTIND - 1)
if [[ $add || $del ]]; then
    if [[ ${#domains[@]}  -eq 0 ]]; then
        echo -e "\033[1mWarning\033[0m \n
            At least an input domain is required to continue! \n
                Use \033[1msweet-dns -h\033[0m for more help. \n"
        exit 1
    fi
    if [[ $add ]]; then
       for domain in "${domains[@]}"; do add; done
    fi
    if [[ $del ]]; then
        for domain in "${domains[@]}"; do del; done
    fi
    rest
    if [[ $? -eq 0 ]]; then
        if [[ $newdomain ]]; then
            if [[ ${#newdomain[@]}  > 1 ]]; then
                for domain in "${newdomain[@]}"; do
                    if [[ $newentry ]]; then
                        newentry=$newentry" & "$domain
                    else
                        newentry=" $domain"
                    fi
                    newnumber="s"
                done
            else
                newentry=" $newdomain"
                newnumber=""
            fi
            echo -e "\033[1mNotification\033[0m \n
            Domain$newnumber\033[1m$newentry\033[0m successfully added!. \n"
        fi
        if [[ $existingdomain ]]; then
            if [[ ${#existingdomain[@]}  > 1 ]]; then
                for domain in "${existingdomain[@]}"; do
                    if [[ $existentry ]]; then
                        existentry=$existentry" & "$domain
                    else
                        existentry=" $domain"
                    fi
                    existnumber="s"
                done
            else
                existentry=" $existingdomain"
                existnumber=""
            fi
            if [[ $resolver == true ]]; then
                message=", resolvers was fixed!"
            else
                message="!"
            fi
            echo -e "\033[1mWarning\033[0m \n
            Domain$existnumber\033[1m$existentry\033[0m already exist$message. \n"
        fi
        if [[ $deletedomain ]]; then
            if [[ ${#deletedomain[@]}  > 1 ]]; then
                for domain in "${deletedomain[@]}"; do
                    if [[ $deleteentry ]]; then
                        deleteentry=$deleteentry" & "$domain
                    else
                        deleteentry=" $domain"
                    fi
                    deletenumber="s"
                done
            else
                deleteentry=" $deletedomain"
                deletenumber=""
            fi
            echo -e "\033[1mNotification\033[0m \n
            Domain$deletenumber\033[1m$deleteentry\033[0m successfully deleted!. \n"
        fi
        exit 0
    else
        exit 1
    fi
else
    echo -e "\033[1mWarning\033[0m \n
    At least -A or -D is required to continue! \n
        Use \033[1msweet-dns -h\033[0m for more help. \n"
    exit 1
fi
